"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const path_1 = require("path");
const load_generatedrc_1 = require("./load-generatedrc");
class Generated extends command_1.Command {
    formatBaseDir(opt) {
        const cwd = process.cwd();
        let baseDir = opt.baseDir;
        if (!opt.baseDir)
            baseDir = cwd;
        if (!path_1.isAbsolute(baseDir))
            baseDir = path_1.resolve(cwd, baseDir);
        return baseDir;
    }
    async run() {
        try {
            const { flags } = this.parse(Generated);
            const cmdPluginName = flags.plugin; // run single plugin
            const opt = load_generatedrc_1.loadGeneratedrc(); // Generatedrc config
            opt.baseDir = this.formatBaseDir(opt);
            if (!opt.generatedDir) {
                opt.generatedDir = path_1.join(opt.baseDir, 'generated');
            }
            /** run all plugins */
            for (const plugin of opt.plugins || []) {
                if (cmdPluginName) {
                    if (typeof plugin !== 'string')
                        continue;
                    if (plugin !== cmdPluginName)
                        continue;
                    require(plugin).default(opt);
                    break;
                }
                else {
                    if (typeof plugin === 'string') {
                        require(plugin).default(opt);
                        continue;
                    }
                    else if (typeof plugin === 'function') {
                        plugin(opt);
                    }
                }
            }
        }
        catch (error) {
            console.log(error);
        }
    }
}
exports.default = Generated;
Generated.description = 'Generate your code';
Generated.flags = {
    // add --version flag to show CLI version
    version: command_1.flags.version({ char: 'v' }),
    help: command_1.flags.help({ char: 'h' }),
    plugin: command_1.flags.string({ char: 'p' }),
};
tslib_1.__exportStar(require("./typings"), exports);
